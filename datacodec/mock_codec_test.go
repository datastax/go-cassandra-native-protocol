// Code generated by mockery 2.9.4. DO NOT EDIT.

package datacodec

import (
	datatype "github.com/datastax/go-cassandra-native-protocol/datatype"
	mock "github.com/stretchr/testify/mock"

	primitive "github.com/datastax/go-cassandra-native-protocol/primitive"
)

// mockCodec is an autogenerated mock type for the Codec type
type mockCodec struct {
	mock.Mock
}

// DataType provides a mock function with given fields:
func (_m *mockCodec) DataType() datatype.DataType {
	ret := _m.Called()

	var r0 datatype.DataType
	if rf, ok := ret.Get(0).(func() datatype.DataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datatype.DataType)
		}
	}

	return r0
}

// Decode provides a mock function with given fields: source, dest, version
func (_m *mockCodec) Decode(source []byte, dest interface{}, version primitive.ProtocolVersion) (bool, error) {
	ret := _m.Called(source, dest, version)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, interface{}, primitive.ProtocolVersion) bool); ok {
		r0 = rf(source, dest, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, interface{}, primitive.ProtocolVersion) error); ok {
		r1 = rf(source, dest, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: source, version
func (_m *mockCodec) Encode(source interface{}, version primitive.ProtocolVersion) ([]byte, error) {
	ret := _m.Called(source, version)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interface{}, primitive.ProtocolVersion) []byte); ok {
		r0 = rf(source, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, primitive.ProtocolVersion) error); ok {
		r1 = rf(source, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
