// Code generated by mockery v2.12.3. DO NOT EDIT.

package datacodec

import mock "github.com/stretchr/testify/mock"

// mockInjector is an autogenerated mock type for the injector type
type mockInjector struct {
	mock.Mock
}

// setElem provides a mock function with given fields: index, key, value, keyWasNull, valueWasNull
func (_m *mockInjector) setElem(index int, key interface{}, value interface{}, keyWasNull bool, valueWasNull bool) error {
	ret := _m.Called(index, key, value, keyWasNull, valueWasNull)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}, interface{}, bool, bool) error); ok {
		r0 = rf(index, key, value, keyWasNull, valueWasNull)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// zeroElem provides a mock function with given fields: index, key
func (_m *mockInjector) zeroElem(index int, key interface{}) (interface{}, error) {
	ret := _m.Called(index, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int, interface{}) interface{}); ok {
		r0 = rf(index, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, interface{}) error); ok {
		r1 = rf(index, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newMockInjectorT interface {
	mock.TestingT
	Cleanup(func())
}

// newMockInjector creates a new instance of mockInjector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockInjector(t newMockInjectorT) *mockInjector {
	mock := &mockInjector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
