//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2022 DataStax
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by deepcopy-gen. DO NOT EDIT.

package datatype

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomType) DeepCopyInto(out *CustomType) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomType.
func (in *CustomType) DeepCopy() *CustomType {
	if in == nil {
		return nil
	}
	out := new(CustomType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyDataType is an autogenerated deepcopy function, copying the receiver, creating a new DataType.
func (in *CustomType) DeepCopyDataType() DataType {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListType) DeepCopyInto(out *ListType) {
	*out = *in
	if in.ElementType != nil {
		out.ElementType = in.ElementType.DeepCopyDataType()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListType.
func (in *ListType) DeepCopy() *ListType {
	if in == nil {
		return nil
	}
	out := new(ListType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyDataType is an autogenerated deepcopy function, copying the receiver, creating a new DataType.
func (in *ListType) DeepCopyDataType() DataType {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MapType) DeepCopyInto(out *MapType) {
	*out = *in
	if in.KeyType != nil {
		out.KeyType = in.KeyType.DeepCopyDataType()
	}
	if in.ValueType != nil {
		out.ValueType = in.ValueType.DeepCopyDataType()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MapType.
func (in *MapType) DeepCopy() *MapType {
	if in == nil {
		return nil
	}
	out := new(MapType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyDataType is an autogenerated deepcopy function, copying the receiver, creating a new DataType.
func (in *MapType) DeepCopyDataType() DataType {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimitiveType) DeepCopyInto(out *PrimitiveType) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimitiveType.
func (in *PrimitiveType) DeepCopy() *PrimitiveType {
	if in == nil {
		return nil
	}
	out := new(PrimitiveType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyDataType is an autogenerated deepcopy function, copying the receiver, creating a new DataType.
func (in *PrimitiveType) DeepCopyDataType() DataType {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SetType) DeepCopyInto(out *SetType) {
	*out = *in
	if in.ElementType != nil {
		out.ElementType = in.ElementType.DeepCopyDataType()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SetType.
func (in *SetType) DeepCopy() *SetType {
	if in == nil {
		return nil
	}
	out := new(SetType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyDataType is an autogenerated deepcopy function, copying the receiver, creating a new DataType.
func (in *SetType) DeepCopyDataType() DataType {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TupleType) DeepCopyInto(out *TupleType) {
	*out = *in
	if in.FieldTypes != nil {
		in, out := &in.FieldTypes, &out.FieldTypes
		*out = make([]DataType, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				(*out)[i] = (*in)[i].DeepCopyDataType()
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TupleType.
func (in *TupleType) DeepCopy() *TupleType {
	if in == nil {
		return nil
	}
	out := new(TupleType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyDataType is an autogenerated deepcopy function, copying the receiver, creating a new DataType.
func (in *TupleType) DeepCopyDataType() DataType {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserDefinedType) DeepCopyInto(out *UserDefinedType) {
	*out = *in
	if in.FieldNames != nil {
		in, out := &in.FieldNames, &out.FieldNames
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FieldTypes != nil {
		in, out := &in.FieldTypes, &out.FieldTypes
		*out = make([]DataType, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				(*out)[i] = (*in)[i].DeepCopyDataType()
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserDefinedType.
func (in *UserDefinedType) DeepCopy() *UserDefinedType {
	if in == nil {
		return nil
	}
	out := new(UserDefinedType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyDataType is an autogenerated deepcopy function, copying the receiver, creating a new DataType.
func (in *UserDefinedType) DeepCopyDataType() DataType {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
